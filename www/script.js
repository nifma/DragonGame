const API = "";
async function getState() {
    const r = await fetch(API + "/state");
    return r.json();
}
async function sendAnswer(ans) {
    await fetch(API + "/answer", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ answer: ans }) });
}
async function newGame() {
    await fetch(API + "/newgame", { method: "POST" });
}

const questionDiv = document.getElementById("question");
const historyDiv = document.getElementById("history");
const form = document.getElementById("form");
const answer = document.getElementById("answer");
const restart = document.getElementById("restart");
const heroCard = document.getElementById("heroCard");
const dragonCard = document.getElementById("dragonCard");
const heroImg = document.getElementById("heroImg");
const dragonImg = document.getElementById("dragonImg");
const dragonName = document.getElementById("dragonName");
const dragonStatus = document.getElementById("dragonStatus");
const heroStatus = document.getElementById("heroStatus");
const celebrationEffect = document.getElementById("celebration");
const defeatEffect = document.getElementById("defeat");

let lastEnemyColor = '';

async function render() {
    const s = await getState();
    questionDiv.textContent = s.question || "";

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    historyDiv.innerHTML = s.history ? s.history.replace(/\n/g, '<br>') : "";

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–Ω–∏–∑
    historyDiv.scrollTop = historyDiv.scrollHeight;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ—Ä–æ—è
    heroStatus.textContent = `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${s.hero.hp} | ‚öîÔ∏è –ê—Ç–∞–∫–∞: ${s.hero.atk} | ‚≠ê –û–ø—ã—Ç: ${s.hero.exp}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞
    if (s.enemy.name !== "-") {
        dragonName.textContent = s.enemy.name;
        dragonStatus.textContent = `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${s.enemy.hp} | ‚öîÔ∏è –ê—Ç–∞–∫–∞: ${s.enemy.atk}`;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥—Ä–∞–∫–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–≤–µ—Ç–∞
        if (s.enemy.color !== lastEnemyColor) {
            const dragonImageMap = {
                'Yellow': 'images/yellow-dragon.jpg',
                'Blue': 'images/blue-dragon.jpg',
                'Purple': 'images/purple-dragon.jpg',
                'Red': 'images/red-dragon.jpg',
                'Green': 'images/green-dragon.jpg'
            };
            dragonImg.src = dragonImageMap[s.enemy.color] || 'images/not-yet.jpg';
            lastEnemyColor = s.enemy.color;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥—Ä–∞–∫–æ–Ω–∞
        dragonCard.style.display = 'block';
    } else {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥—Ä–∞–∫–æ–Ω–∞, –µ—Å–ª–∏ –≤—Ä–∞–≥–∞ –Ω–µ—Ç
        dragonCard.style.display = 'none';
    }

    // –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∞—Ç–∞–∫–µ
    if (s.info && s.info.includes('–∞—Ç–∞–∫—É–µ—Ç')) {
        if (s.info.includes('–ì–µ—Ä–æ–π –∞—Ç–∞–∫—É–µ—Ç')) {
            animateAttack(heroCard, dragonCard);
        } else if (s.info.includes('–∞—Ç–∞–∫—É–µ—Ç –≥–µ—Ä–æ—è')) {
            animateAttack(dragonCard, heroCard);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if (s.finished) {
        answer.disabled = true;
        form.querySelector("button").disabled = true;

        if (s.win) {
            showCelebration();
        } else {
            showDefeat();
        }
    } else {
        answer.disabled = false;
        form.querySelector("button").disabled = false;
        answer.focus();
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
function animateAttack(attacker, target) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    attacker.classList.remove('attacking');
    target.classList.remove('taking-damage');

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
    void attacker.offsetWidth;
    void target.offsetWidth;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    attacker.classList.add('attacking');
    target.classList.add('taking-damage');

    // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => {
        attacker.classList.remove('attacking');
        target.classList.remove('taking-damage');
    }, 600);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
function showCelebration() {
    celebrationEffect.innerHTML = '';
    celebrationEffect.style.display = 'block';

    const emojis = ['üéâ', 'üéä', '‚≠ê', 'üèÜ', 'üëë', 'üéà', '‚ú®'];
    for (let i = 0; i < 50; i++) {
        const emoji = document.createElement('div');
        emoji.className = 'celebration-emoji';
        emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        emoji.style.left = Math.random() * 100 + 'vw';
        emoji.style.animationDelay = Math.random() * 2 + 's';
        emoji.style.fontSize = (Math.random() * 20 + 20) + 'px';
        celebrationEffect.appendChild(emoji);
    }

    setTimeout(() => {
        celebrationEffect.style.display = 'none';
        celebrationEffect.innerHTML = '';
    }, 3000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è
function showDefeat() {
    defeatEffect.innerHTML = '';
    defeatEffect.style.display = 'block';

    const emojis = ['üíÄ', 'üòµ', '‚ö∞Ô∏è', 'ü™¶', '‚ò†Ô∏è'];
    for (let i = 0; i < 30; i++) {
        const emoji = document.createElement('div');
        emoji.className = 'defeat-emoji';
        emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        emoji.style.left = Math.random() * 100 + 'vw';
        emoji.style.animationDelay = Math.random() * 2 + 's';
        emoji.style.fontSize = (Math.random() * 15 + 15) + 'px';
        defeatEffect.appendChild(emoji);
    }

    setTimeout(() => {
        defeatEffect.style.display = 'none';
        defeatEffect.innerHTML = '';
    }, 3000);
}

form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const val = answer.value.trim();
    if (!val) return;
    await sendAnswer(val);
    answer.value = "";
    await render();
});

restart.addEventListener("click", async () => {
    await newGame();
    celebrationEffect.style.display = 'none';
    defeatEffect.style.display = 'none';
    await render();
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
render();