const API = "";
async function getState() {
    const r = await fetch(API + "/state");
    return r.json();
}
async function sendAnswer(ans) {
    await fetch(API + "/answer", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ answer: ans }) });
}
async function newGame() {
    await fetch(API + "/newgame", { method: "POST" });
}

const questionDiv = document.getElementById("question");
const historyDiv = document.getElementById("history");
const form = document.getElementById("form");
const answer = document.getElementById("answer");
const restart = document.getElementById("restart");
const heroCard = document.getElementById("heroCard");
const dragonCard = document.getElementById("dragonCard");
const heroImg = document.getElementById("heroImg");
const dragonImg = document.getElementById("dragonImg");
const dragonName = document.getElementById("dragonName");
const heroHealthFill = document.getElementById("heroHealthFill");
const enemyHealthFill = document.getElementById("enemyHealthFill");
const heroHpValue = document.getElementById("heroHpValue");
const enemyHpValue = document.getElementById("enemyHpValue");
const heroAtk = document.getElementById("heroAtk");
const heroExp = document.getElementById("heroExp");
const enemyAtk = document.getElementById("enemyAtk");
const celebrationEffect = document.getElementById("celebration");
const defeatEffect = document.getElementById("defeat");

let lastEnemyColor = '';

async function render() {
    const s = await getState();
    questionDiv.textContent = s.question || "";

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    historyDiv.innerHTML = s.history ? s.history.replace(/\n/g, '<br>') : "";
    historyDiv.scrollTop = historyDiv.scrollHeight;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ—Ä–æ—è
    const heroMaxHp = 35;
    const heroHpPercent = (s.hero.hp / heroMaxHp) * 100;
    heroHealthFill.style.width = `${heroHpPercent}%`;
    heroHpValue.textContent = `${s.hero.hp}/${heroMaxHp}`;
    heroAtk.textContent = s.hero.atk;
    heroExp.textContent = s.hero.exp;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–∞
    if (s.enemy.name !== "-") {
        dragonName.textContent = s.enemy.name;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP –≤—Ä–∞–≥–∞
        const enemyMaxHp = s.enemy.name.includes('Dragon') ? 15 : 12;
        const enemyHpPercent = (s.enemy.hp / enemyMaxHp) * 100;
        enemyHealthFill.style.width = `${enemyHpPercent}%`;
        enemyHpValue.textContent = `${s.enemy.hp}/${enemyMaxHp}`;
        enemyAtk.textContent = s.enemy.atk;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–∞
        if (s.enemy.color !== lastEnemyColor) {
            const enemyImageMap = {
                'Yellow': 'images/yellow-dragon.jpg',
                'Blue': 'images/blue-dragon.jpg',
                'Purple': 'images/purple-dragon.jpg',
                'Red': 'images/red-dragon.jpg',
                'Green': 'images/green-dragon.jpg'
            };

            if (s.enemy.name.includes('Goblin')) {
                dragonImg.src = 'images/goblin.jpg';
            } else {
                dragonImg.src = enemyImageMap[s.enemy.color] || 'images/not-yet.jpg';
            }
            lastEnemyColor = s.enemy.color;
        }

        dragonCard.style.display = 'block';
    } else {
        dragonCard.style.display = 'none';
        enemyHealthFill.style.width = '0%';
        enemyHpValue.textContent = '0/0';
    }

    // –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∞—Ç–∞–∫–µ
    if (s.info && s.info.includes('–∞—Ç–∞–∫—É–µ—Ç')) {
        if (s.info.includes('–∞—Ç–∞–∫—É–µ—Ç –≥–µ—Ä–æ—è')) {
            // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –≥–µ—Ä–æ—è
            animateAttack(dragonCard, heroCard, 'enemy');
        } else {
            // –ì–µ—Ä–æ–π –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–∞
            animateAttack(heroCard, dragonCard, 'hero');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if (s.finished) {
        answer.disabled = true;
        form.querySelector("button").disabled = true;

        if (s.win) {
            showCelebration();
        } else {
            showDefeat();
        }
    } else {
        answer.disabled = false;
        form.querySelector("button").disabled = false;
        answer.focus();
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∫–ª–æ–≤ –∞—Ç–∞–∫–∏
function createAttackParticles(attacker, target, type) {
    const attackerRect = attacker.getBoundingClientRect();
    const targetRect = target.getBoundingClientRect();

    const attackEmojis = type === 'hero' ?
        ['‚öîÔ∏è', '‚ú®', 'üåü', 'üí´', 'üî•'] :
        ['üî•', 'üíÄ', '‚ò†Ô∏è', '‚ö°', 'üå™Ô∏è'];

    const particleColor = type === 'hero' ? '#3b82f6' : '#ef4444';

    // –ü–∞—Ä—Ç–∏–∫–ª—ã –ª–µ—Ç—è—â–∏–µ –æ—Ç –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∫ —Ü–µ–ª–∏
    for (let i = 0; i < 12; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle attack-particle';
        particle.textContent = attackEmojis[Math.floor(Math.random() * attackEmojis.length)];
        particle.style.color = particleColor;
        particle.style.fontSize = (Math.random() * 16 + 14) + 'px';

        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        const startX = attackerRect.left + attackerRect.width / 2;
        const startY = attackerRect.top + attackerRect.height / 2;

        // –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —É —Ü–µ–ª–∏
        const endX = targetRect.left + targetRect.width / 2;
        const endY = targetRect.top + targetRect.height / 2;

        particle.style.left = startX + 'px';
        particle.style.top = startY + 'px';

        const translateX = endX - startX;
        const translateY = endY - startY;

        particle.style.setProperty('--translate-x', translateX + 'px');
        particle.style.setProperty('--translate-y', translateY + 'px');

        document.body.appendChild(particle);

        setTimeout(() => {
            if (particle.parentNode) {
                particle.parentNode.removeChild(particle);
            }
        }, 800);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∫–ª–æ–≤ —É—Ä–æ–Ω–∞
function createDamageParticles(target, type) {
    const rect = target.getBoundingClientRect();
    const damageEmojis = type === 'hero' ?
        ['üíî', 'ü©∏', 'üòµ', 'üí¢'] :
        ['üí•', 'üî•', '‚ö°', 'üí¢', '‚ùå'];

    const particleColor = type === 'hero' ? '#ef4444' : '#f59e0b';

    for (let i = 0; i < 8; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle damage-particle';
        particle.textContent = damageEmojis[Math.floor(Math.random() * damageEmojis.length)];
        particle.style.color = particleColor;
        particle.style.fontSize = (Math.random() * 16 + 14) + 'px';

        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        const posX = rect.left + Math.random() * rect.width;
        const posY = rect.top + Math.random() * rect.height;

        particle.style.left = posX + 'px';
        particle.style.top = posY + 'px';

        // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–µ—Ç–∞
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * 60 + 30;
        const translateX = Math.cos(angle) * distance;
        const translateY = Math.sin(angle) * distance;

        particle.style.setProperty('--translate-x', translateX + 'px');
        particle.style.setProperty('--translate-y', translateY + 'px');

        document.body.appendChild(particle);

        setTimeout(() => {
            if (particle.parentNode) {
                particle.parentNode.removeChild(particle);
            }
        }, 1000);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏
function animateAttack(attacker, target, type) {
    attacker.classList.remove('attacking');
    target.classList.remove('taking-damage');
    target.classList.remove('damage-glow');

    void attacker.offsetWidth;
    void target.offsetWidth;

    attacker.classList.add('attacking');
    target.classList.add('taking-damage');
    target.classList.add('damage-glow');

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏–∫–ª—ã –∞—Ç–∞–∫–∏
    createAttackParticles(attacker, target, type);

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏–∫–ª—ã —É—Ä–æ–Ω–∞ –Ω–∞ —Ü–µ–ª–∏
    setTimeout(() => {
        createDamageParticles(target, type === 'hero' ? 'enemy' : 'hero');
    }, 300);

    setTimeout(() => {
        attacker.classList.remove('attacking');
        target.classList.remove('taking-damage');
        target.classList.remove('damage-glow');
    }, 600);
}

// –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–±–µ–¥—ã
function showCelebration() {
    celebrationEffect.style.display = 'block';
    const emojis = ['üéâ', 'üéä', '‚≠ê', 'üèÜ', 'üëë'];

    for (let i = 0; i < 30; i++) {
        const emoji = document.createElement('div');
        emoji.className = 'celebration-emoji';
        emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        emoji.style.left = Math.random() * 100 + 'vw';
        emoji.style.animationDelay = Math.random() * 1 + 's';
        celebrationEffect.appendChild(emoji);

        setTimeout(() => {
            if (emoji.parentNode) {
                emoji.parentNode.removeChild(emoji);
            }
        }, 2000);
    }

    setTimeout(() => {
        celebrationEffect.style.display = 'none';
        celebrationEffect.innerHTML = '';
    }, 2000);
}

// –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è
function showDefeat() {
    defeatEffect.style.display = 'block';
    const emojis = ['üíÄ', 'üòµ', 'üíî', '‚ö∞Ô∏è'];

    for (let i = 0; i < 20; i++) {
        const emoji = document.createElement('div');
        emoji.className = 'defeat-emoji';
        emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        emoji.style.left = Math.random() * 100 + 'vw';
        emoji.style.animationDelay = Math.random() * 0.5 + 's';
        defeatEffect.appendChild(emoji);

        setTimeout(() => {
            if (emoji.parentNode) {
                emoji.parentNode.removeChild(emoji);
            }
        }, 2000);
    }

    setTimeout(() => {
        defeatEffect.style.display = 'none';
        defeatEffect.innerHTML = '';
    }, 2000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const ans = answer.value.trim();
    if (!ans) return;

    await sendAnswer(ans);
    answer.value = "";
    await render();
});

restart.addEventListener("click", async () => {
    await newGame();
    await render();
    celebrationEffect.style.display = 'none';
    defeatEffect.style.display = 'none';
    celebrationEffect.innerHTML = '';
    defeatEffect.innerHTML = '';
});

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
render();
