// game.cpp
#include "game.h"
#include <cstdlib>
#include <ctime>
#include <algorithm>

Game& Game::GetInstance() {
  static Game instance;
  return instance;
}

void Game::Reset() {
  srand(static_cast<unsigned>(time(nullptr)));
  hero_ = Hero("–ì–µ—Ä–æ–π", 35, 7);
  enemies_.clear();
  current_enemy_ = 0;
  finished_ = false;
  win_ = false;
  last_info_.clear();
  full_history_.clear();

  std::vector<std::unique_ptr<Enemy>> all_enemies;
  // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–∞–∫–æ–Ω–æ–≤
  all_enemies.push_back(std::unique_ptr<Enemy>(new YellowDragon()));
  all_enemies.push_back(std::unique_ptr<Enemy>(new BlueDragon()));
  all_enemies.push_back(std::unique_ptr<Enemy>(new PurpleDragon()));
  all_enemies.push_back(std::unique_ptr<Enemy>(new GreenDragon()));
  all_enemies.push_back(std::unique_ptr<Enemy>(new RedDragon()));
  // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–±–ª–∏–Ω–æ–≤
  all_enemies.push_back(std::unique_ptr<Enemy>(new MathGoblin()));
  all_enemies.push_back(std::unique_ptr<Enemy>(new RiddleGoblin()));
  all_enemies.push_back(std::unique_ptr<Enemy>(new TrickGoblin()));

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Ä–∞–≥–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  for (int i = all_enemies.size() - 1; i > 0; i--) {
    int j = rand() % (i + 1);
    std::swap(all_enemies[i], all_enemies[j]);
  }

  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 4 –≤—Ä–∞–≥–æ–≤ –¥–ª—è –∏–≥—Ä—ã
  for (int i = 0; i < std::min(4, static_cast<int>(all_enemies.size())); i++) {
    enemies_.push_back(std::move(all_enemies[i]));
  }

  AskNewQuestion();
}

Enemy* Game::GetCurrentEnemy() {
  if (current_enemy_ < static_cast<int>(enemies_.size())) {
    return enemies_[current_enemy_].get();
  }
  return nullptr;
}

void Game::AskNewQuestion() {
  if (finished_) return;
  Enemy* enemy = GetCurrentEnemy();
  if (!enemy) {
    finished_ = true;
    win_ = true;
    last_question_ = "–í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã!";
    return;
  }
  last_question_ = enemy->GetName() + " —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: " + enemy->GenerateQuestion();
  full_history_ += "‚û§ " + last_question_ + "\n";
}

void Game::ProcessAnswer(const std::string& answer) {
  if (finished_) return;
  Enemy* enemy = GetCurrentEnemy();
  if (!enemy) {
    finished_ = true;
    win_ = true;
    return;
  }

  std::string action;
  bool is_correct = enemy->CheckAnswer(answer);
  if (is_correct) {
    hero_.Hit(*enemy);
    hero_.AddExp(5);
    action = "‚úÖ –í–µ—Ä–Ω–æ! –ì–µ—Ä–æ–π –∞—Ç–∞–∫—É–µ—Ç (" + std::to_string(hero_.atk()) + ")";
    full_history_ += "‚úÖ –ì–µ—Ä–æ–π –æ—Ç–≤–µ—á–∞–µ—Ç –≤–µ—Ä–Ω–æ –∏ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–∞!\n";
    if (!enemy->IsAlive()) {
      action += " –∏ –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤—Ä–∞–≥–∞!";
      full_history_ += "üéØ –ì–µ—Ä–æ–π –ø–æ–±–µ–∂–¥–∞–µ—Ç " + enemy->GetName() + "!\n";
      ++current_enemy_;
    }
  } else {
    enemy->Hit(hero_);
    action = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. " + enemy->GetName() + " –∞—Ç–∞–∫—É–µ—Ç –≥–µ—Ä–æ—è (" +
             std::to_string(enemy->atk()) + ")";
    full_history_ += "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! " + enemy->GetName() + " –∞—Ç–∞–∫—É–µ—Ç –≥–µ—Ä–æ—è!\n";
    if (!hero_.IsAlive()) {
      finished_ = true;
      win_ = false;
      last_question_.clear();
      full_history_ += "üíÄ –ì–µ—Ä–æ–π –ø–∞–ª –≤ –±–æ—é... –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n";
    }
  }

  last_info_ = action + "\n";

  if (!finished_) {
    AskNewQuestion();
  } else if (win_) {
    last_question_ = "–ü–æ–±–µ–¥–∞! –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã.";
    full_history_ += "üéâ –ü–û–ë–ï–î–ê! –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã! üéâ\n";
  } else {
    last_question_ = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –ì–µ—Ä–æ–π –ø–∞–ª.";
  }
}

// –ì–µ—Ç—Ç–µ—Ä—ã
const Hero& Game::hero() const { return hero_; }
const std::string& Game::last_question() const { return last_question_; }
const std::string& Game::last_info() const { return last_info_; }
const std::string& Game::full_history() const { return full_history_; }
bool Game::finished() const { return finished_; }
bool Game::win() const { return win_; }